# Dockerfile para deploy standalone do backend
FROM node:18-alpine

# Instalar dependÃªncias do sistema
RUN apk add --no-cache libc6-compat curl && \
    npm install -g pnpm@8.15.4

# Definir diretÃ³rio de trabalho
WORKDIR /app

# Copiar arquivos de configuraÃ§Ã£o
COPY package.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Instalar dependÃªncias
RUN pnpm config set network-timeout 300000 && \
    pnpm install --frozen-lockfile

# Copiar cÃ³digo fonte e prisma
COPY src ./src
COPY prisma ./prisma

# Build da aplicaÃ§Ã£o
RUN echo "ðŸ”§ Gerando Prisma client..." && \
    pnpm prisma generate

RUN echo "ðŸ”¨ Executando build NestJS..." && \
    pnpm run build

# Verificar resultado do build
RUN echo "ðŸ“¦ Verificando build:" && \
    ls -la dist/ && \
    echo "âœ… Main file encontrado:" && \
    ls -la dist/main.js

# Criar usuÃ¡rio nÃ£o-root e diretÃ³rios
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nestjs && \
    mkdir -p /app/data/uploads && \
    chown -R nestjs:nodejs /app

# Mudar para usuÃ¡rio nÃ£o-root
USER nestjs

# Expor porta
EXPOSE 3002

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://127.0.0.1:3002/health || exit 1

# Comando para iniciar
CMD ["node", "dist/main.js"] 