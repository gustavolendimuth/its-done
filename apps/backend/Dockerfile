# Dockerfile para deploy standalone do backend
FROM node:18-alpine

# Instalar depend√™ncias do sistema
RUN apk add --no-cache libc6-compat curl && \
    npm install -g pnpm@8.15.4

# Definir diret√≥rio de trabalho
WORKDIR /app

# Copiar arquivos de configura√ß√£o do workspace
COPY pnpm-workspace.yaml ./
COPY package.json ./

# Criar estrutura de diret√≥rios
RUN mkdir -p apps/backend packages

# Copiar arquivos de configura√ß√£o do backend
COPY apps/backend/package.json ./apps/backend/
COPY apps/backend/tsconfig*.json ./
COPY apps/backend/nest-cli.json ./

# Copiar os pacotes necess√°rios do workspace
COPY packages/types ./packages/types
COPY packages/tsconfig ./packages/tsconfig

# Instalar depend√™ncias
RUN pnpm config set network-timeout 300000 && \
    pnpm install --prod=true && \
    pnpm add prisma@latest --save-dev

# Copiar c√≥digo fonte e prisma
COPY apps/backend/src ./src
COPY apps/backend/prisma ./prisma

# Build da aplica√ß√£o
RUN echo "üîß Gerando Prisma client..." && \
    pnpm prisma generate

RUN echo "üî® Executando build NestJS..." && \
    pnpm run build

# Verificar resultado do build
RUN echo "üì¶ Verificando build:" && \
    ls -la dist/ && \
    echo "‚úÖ Main file encontrado:" && \
    ls -la dist/main.js

# Criar usu√°rio n√£o-root e diret√≥rios
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nestjs && \
    mkdir -p /app/data/uploads && \
    chown -R nestjs:nodejs /app

# Mudar para usu√°rio n√£o-root
USER nestjs

# Expor porta
EXPOSE 3002

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://127.0.0.1:3002/health || exit 1

# Comando para iniciar com migra√ß√µes
CMD ["sh", "-c", "pnpm prisma migrate deploy && pnpm db:seed:prod && node dist/main.js"] 